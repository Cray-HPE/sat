/*
 * MIT License
 *
 * (C) Copyright 2022-2023 Hewlett Packard Enterprise Development LP
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

@Library('csm-shared-library@main') _

pipeline {
    agent {
        label 'metal-gcp-builder'
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timestamps()
    }

    environment {
        NAME = 'cray-sat'
        DESCRIPTION = 'System Admin Toolkit'
        IS_STABLE = getBuildIsStable(releaseBranchIsStable: true)
        VERSION = getDockerBuildVersion(versionScript: 'build_scripts/version.sh', isStable: env.IS_STABLE)
        DOCKER_ARGS = getDockerBuildArgs(name: 'sat', description: env.DESCRIPTION, version: env.VERSION)
        DOCKER_BUILDKIT = '1'
    }

    stages {
        stage('Run Unit Tests') {
            steps {
                sh 'make unittest'
            }
        }

        stage('Check Code Style') {
            steps {
                sh 'make codestyle'
            }
        }

        stage('Build Image') {
            steps {
                sh 'make image'
            }
        }

        stage('Publish') {
            steps {
                script {
                    publishCsmDockerImage(
                        artifactoryRepo: 'sat-docker',
                        image: env.NAME,
                        tag: env.VERSION,
                        isStable: env.IS_STABLE
                    )
                }
            }
        }
    }
}
